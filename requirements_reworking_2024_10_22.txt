=========================================
         Minimum Viable Product (MVP)
=========================================
Project Overview:
-----------------
Objective: Create a simplified version of the Data Warehouse focusing on core functionality:
- Extracting data from Steam and GOG
- Basic transformation
- Displaying key analytics related to DRM-free games

Timeline: 6 Weeks

-----------------------------------------
1. Data Extraction
-----------------------------------------
Timeline: Week 1
- Task: Integrate with Steam and GOG APIs
  - **Explanation**: This is the foundational step where you collect data from both gaming platforms. By fetching data directly from the APIs, you ensure you have the latest information about games, including titles, genres, and DRM status.
  - **Tools**: 
    - **Python**: For writing scripts to make API requests and handle data.
    - **MySQL**: To temporarily store the raw data in a staging table.

- Task: Load data into a single staging table without extensive caching
  - **Explanation**: Staging tables allow you to keep raw data separate from transformed data. This provides flexibility to manipulate or reprocess data if needed without affecting the final tables.
  - **Tools**: 
    - **MySQL**: The staging table will be created here to hold the initial data load.

-----------------------------------------
2. Simple ETL Process
-----------------------------------------
Timeline: Weeks 2-3
- Task: Basic Data Transformation
  - **Explanation**: After extracting data, you need to clean and format it. This may include removing unnecessary fields, normalizing data formats, and preparing it for analysis. A simple transformation ensures you focus on key attributes like game names, developers, and DRM status.
  - **Tools**: 
    - **Python**: For data cleaning and transformation scripts.
    - **MySQL**: To load cleaned data into the final table.

- Task: Load data into a final table with minimal de-duplication (e.g., based on game name)
  - **Explanation**: De-duplication is crucial for maintaining data integrity. By using game names as a primary identifier, you can avoid duplicates and ensure each entry is unique in your analysis.
  - **Tools**: 
    - **MySQL**: For the final table where de-duplicated data will reside.

-----------------------------------------
3. Data Visualization
-----------------------------------------
Timeline: Weeks 4-5
- Task: Flask Application Development
  - **Explanation**: Building a web application allows users to interact with your data. The application will display the top DRM-free games, providing insights and making the data more accessible.
  - **Tools**: 
    - **Flask**: A lightweight web framework for Python that makes it easy to create web applications.
    - **Jinja2**: For templating, allowing you to dynamically render HTML based on the data fetched from your database.

- Task: Implement basic search functionality (e.g., filter by game name)
  - **Explanation**: Adding search functionality enhances user experience by allowing users to quickly find specific games or filter results based on their interests. This interactivity is crucial for user engagement.
  - **Tools**: 
    - **Flask**: To handle user input and queries.
    - **MySQL**: To query the final table based on user input.

-----------------------------------------
4. Backup and Documentation
-----------------------------------------
Timeline: Week 6
- Task: Basic Backup Strategy
  - **Explanation**: Regular backups are essential to prevent data loss. By creating a backup of your database, you ensure that you can recover data in case of corruption or other issues.
  - **Tools**: 
    - **MySQL**: Use built-in backup features or scripts to schedule regular backups of your database.

- Task: Minimal Documentation
  - **Explanation**: Documenting your processes and architecture helps with future maintenance and improvements. It serves as a reference for anyone else who might work on the project or for yourself later.
  - **Tools**: 
    - **Git**: For version control and keeping documentation updated alongside code.
    - **Markdown or simple text files**: To write and organize documentation.

=========================================
General Requirements:
---------------------
- Development Environment: Python 3.10+, Flask, MySQL
  - **Explanation**: These tools are chosen for their ease of use, community support, and ability to quickly develop the necessary functionality.
  
- Version Control: Use Git for tracking changes.
  - **Explanation**: Version control allows you to manage code changes, collaborate with others, and maintain a history of your project.

-----------------------------------------
Performance Monitoring and Maintenance
-----------------------------------------
Ongoing Task: Monitor basic performance metrics; maintenance will be minimal.
- **Explanation**: Keeping an eye on performance helps identify potential bottlenecks early and ensures that the application runs smoothly as data volume increases.

=========================================
