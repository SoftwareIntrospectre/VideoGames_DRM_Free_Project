Intent is to have a common dataset in a Data Warehouse that combines data from GOG.com and Steam.
If a game is found in both (INNER JOIN), that game has a DRM-Free version available. The goal is to encourage people to use the DRM-Free version instead of Steam.

If it does not, then it's considered "DRM-Only License".


I'm rethinking the Database design to accomodate this end, when I add the Steam data later.

Goals:
    1. Regular ingestions on daily basis
    2. Stage the load for each data SET
    3. Use Stored Procedures to update the fact/dimension tables in the Data Warehouse
    4. Use the combined dataset to (eventually) create a Data Visualization of Games that have DRM-free versions, and which do not.
    5. Data Visualization to show Analysis of how many / percentage of games on Steam have DRM-Free copies or not.

To achieve this, will use a Snowflake Schema (normalized, multiple levels of dimensions, fact table relationships)




-- 1. Common Game Dimension Table
CREATE TABLE IF NOT EXISTS common_game_dim (
    common_game_key INT AUTO_INCREMENT PRIMARY KEY,
    gog_game_id BIGINT UNIQUE,        -- GOG.com ID
    steam_game_id BIGINT UNIQUE,      -- Steam ID
    title_name VARCHAR(255) NOT NULL,
    has_drm_free_version BOOLEAN DEFAULT FALSE, -- Flag for DRM-free status
    effective_date DATE NOT NULL,
    end_date DATE,
    current_flag BOOLEAN NOT NULL DEFAULT TRUE
);

-- 2. GOG Game Dimension Table
CREATE TABLE IF NOT EXISTS gog_game_dim (
    gog_game_key INT AUTO_INCREMENT PRIMARY KEY,
    common_game_key INT NOT NULL,
    FOREIGN KEY (common_game_key) REFERENCES common_game_dim(common_game_key) ON DELETE CASCADE,
    -- Other GOG specific fields
    effective_date DATE NOT NULL,
    end_date DATE,
    current_flag BOOLEAN NOT NULL DEFAULT TRUE
);

-- 3. Steam Game Dimension Table
CREATE TABLE IF NOT EXISTS steam_game_dim (
    steam_game_key INT AUTO_INCREMENT PRIMARY KEY,
    common_game_key INT NOT NULL,
    FOREIGN KEY (common_game_key) REFERENCES common_game_dim(common_game_key) ON DELETE CASCADE,
    -- Other Steam specific fields
    effective_date DATE NOT NULL,
    end_date DATE,
    current_flag BOOLEAN NOT NULL DEFAULT TRUE
);

-- 4. Fact Table
CREATE TABLE IF NOT EXISTS games_fact (
    fact_id INT AUTO_INCREMENT PRIMARY KEY,
    common_game_key INT NOT NULL,
    original_price DECIMAL(10, 2),
    final_price DECIMAL(10, 2),
    store_url VARCHAR(255),
    load_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (common_game_key) REFERENCES common_game_dim(common_game_key) ON DELETE CASCADE
);


+----------------------+       
|   common_game_dim   |       
+----------------------+       
| common_game_key (PK)|
| gog_game_id         |       
| steam_game_id       |       
| title_name          |       
| has_drm_free_version |       
| effective_date      |       
| end_date            |       
| current_flag        |       
+----------------------+       
        /\
       /  \
      /    \
+-------------+         +--------------+
| gog_game_dim|         | steam_game_dim|
+-------------+         +--------------+
| gog_game_key (PK)    | steam_game_key (PK) |
| common_game_key (FK) | common_game_key (FK) |
| effective_date       | effective_date       |
| end_date             | end_date            |
| current_flag         | current_flag        |
+----------------------+ +---------------------+

                |
                |
                v
+-------------------+
|    games_fact     |
+-------------------+
| fact_id (PK)     |
| common_game_key (FK) |
| original_price    |
| final_price       |
| store_url         |
| load_date         |
+-------------------+



--Example queries:

--find games on both platforms:
    SELECT g.title_name, g.has_drm_free_version
    FROM common_game_dim g
    JOIN gog_game_dim gog ON g.common_game_key = gog.common_game_key
    JOIN steam_game_dim steam ON g.common_game_key = steam.common_game_key;

--Find GOG-only games:
    SELECT g.title_name
    FROM common_game_dim g
    LEFT JOIN steam_game_dim steam ON g.common_game_key = steam.common_game_key
    WHERE steam.common_game_key IS NULL;
